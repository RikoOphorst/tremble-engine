#pragma once

#include "RakPeerInterface.h"
#include "peer.h"

namespace tremble
{
	class FreeListAllocator;

	/**
	 * @brief Saves you some code when creating a packet.
	 *
	 * @author Simon Kok
	 */
	class PeerFactory
	{
	public:
		PeerFactory();
		~PeerFactory();

		/**
		 * @brief Add a new peer to the collection of connected peers with a generated index (for servers).
		 *
		 * @param[in] guid The raknet guid of the connected peer.
		 * @param[in] is_host whether the peer is a host or not.
		 */
		Peer& CreatePeer(RakNet::RakNetGUID guid, bool is_host = false);

		/**
		 * @brief Add a new peer to the collection of peers with an index not generated by the network manager (for clients).
		 *
		 * @param[in] index The server's peer index of the connected peer.
		 * @param[in] guid The raknet guid of the connected peer.
		 * @param[in] is_host whether the peer is a host or not.
		 */
		Peer& CreatePeer(PeerID index_, RakNet::RakNetGUID guid, bool is_host = false);

		/**
		* @brief Add a new peer to the collection of peers with an index not generated by the network manager, and without a guid (for clients).
		*
		* @param[in] index The server's peer index of the connected peer.
		* @param[in] is_host whether the peer is a host or not.
		*/
		Peer& CreatePeer(PeerID index_, bool is_host = false);

		/**
		 * @brief Remove a peer from the collection of peers.
		 *
		 * @param[in] peer The peer to be removed.
		 */
		void DestroyPeer(Peer& peer);

		/**
		 * @brief Remove a peer from the collection of peers.
		 *
		 * @param[in] peer_index The index of the peer to be removed.
		 */
		void DestroyPeer(PeerID peer_index);

		/**
		 * @param[in] index
		 * @return The peer with the specified index.
		 */
		Peer* FindPeer(PeerID peer_index);

		/**
		 * @param[in] guid
		 * @return The peer with matching guid.
		 */
		Peer* FindPeer(RakNet::RakNetGUID guid);

		/**
		* @return The vector of peers.
		*/
		const std::vector<Peer*> GetAllPeers()& { return all_peers_; }

		/**
		 * @brief Set the my_peer_ pointer.
		 * @param[in] peer The peer pointer to point to.
		 */
		void SetMyPeer(Peer& peer) { my_peer_ = &peer; }

		/**
		 * @return A pointer to our own peer.
		 */
		Peer* GetMyPeer() { return my_peer_; }

		/**
		* @brief Set the hosting_peer_ pointer.
		* @param[in] peer The pointer to the hosting peer.
		*/
		void SetHostingPeer(Peer& peer) { hosting_peer_ = &peer; }

		/**
		 * @return A pointer to the hosting peer.
		 */
		Peer* GetHostingPeer() { return hosting_peer_; }

		void LogPeers(); //!< Temporary logging function.

	protected:
		FreeListAllocator* pf_allocator_; //!< Pointer to the packetreceiver's allocator.

	private:
		int peer_index_ = 0; //!< The peer index (which the server increments on when a new client connects).
		Peer* my_peer_; //!< Our own peer.
		Peer* hosting_peer_; //!< The hosting peer.
		std::vector<Peer*> all_peers_; //!< All connected peers.
	};
}